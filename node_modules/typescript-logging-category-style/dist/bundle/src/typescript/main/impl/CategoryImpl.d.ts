import { Category } from "../api/Category";
import { CoreLogger, ExceptionType, LogLevel, LogMessageType } from "typescript-logging";
/**
 * Implementation for Category.
 */
export declare class CategoryImpl implements Category {
    private readonly _logger;
    private readonly _name;
    private readonly _parent;
    private readonly _fnGetOrCreateChildCategory;
    private readonly _children;
    constructor(logger: CoreLogger, name: string, parent: Category | undefined, fnGetOrCreateChildCategory: (name: string, parent: Category) => Category);
    get name(): string;
    get parent(): Category | undefined;
    get path(): ReadonlyArray<string>;
    get children(): ReadonlyArray<Category>;
    addChild(childCategory: Category): void;
    getChildCategory(name: string): Category;
    get id(): string;
    get logLevel(): LogLevel;
    get runtimeSettings(): import("typescript-logging").LogRuntime;
    get logger(): CoreLogger;
    trace(message: LogMessageType, ...args: unknown[]): void;
    trace(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    debug(message: LogMessageType, ...args: unknown[]): void;
    debug(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    info(message: LogMessageType, ...args: unknown[]): void;
    info(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    warn(message: LogMessageType, ...args: unknown[]): void;
    warn(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    error(message: LogMessageType, ...args: unknown[]): void;
    error(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    fatal(message: LogMessageType, ...args: unknown[]): void;
    fatal(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
}
//# sourceMappingURL=CategoryImpl.d.ts.map