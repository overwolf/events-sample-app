{"version":3,"file":"typescript-logging-category.esm.js","sources":["../../../core/dist/bundle/typescript-logging.esm.js","../../src/typescript/main/impl/CategoryImpl.ts","../../src/typescript/main/impl/CategoryProviderImpl.ts","../../src/typescript/main/impl/CategoryControlProviderImpl.ts","../../src/typescript/main/util/DebugUtil.ts","../../src/typescript/main/impl/CategoryProviderService.ts","../../src/typescript/main/api/CategoryProvider.ts"],"sourcesContent":["/**\r\n * Extends Map and adds a few convenient functions.\r\n */\r\nclass EnhancedMap extends Map {\r\n    /**\r\n     * If key has a mapping already returns the currently associated value. If\r\n     * there is no mapping, calls the computer which must return a value V.\r\n     * The value is then stored for given key and returned.\r\n     * @param key Key\r\n     * @param computer Computer which is called only if key has no mapping yet.\r\n     * @return Existing value if the key already existed, or the newly computed value.\r\n     */\r\n    computeIfAbsent(key, computer) {\r\n        if (this.has(key)) {\r\n            return this.get(key);\r\n        }\r\n        const newValue = computer(key);\r\n        this.set(key, newValue);\r\n        return newValue;\r\n    }\r\n    /**\r\n     * If the key exists already calls given computer, if the key does not exist\r\n     * this method does nothing.\r\n     *\r\n     * The computer is called with current key and current value associated. The\r\n     * computer can return a (new) value V or undefined. When undefined is returned\r\n     * the key is removed from this map, when a V is returned the key is updated\r\n     * with the new value V.\r\n     * @param key Key\r\n     * @param computer Computer which is called only if the key has a mapping already\r\n     * @return Undefined if the key has no mapping, otherwise the value returned from computer\r\n     */\r\n    computeIfPresent(key, computer) {\r\n        const currentValue = this.get(key);\r\n        if (currentValue === undefined) {\r\n            return undefined;\r\n        }\r\n        const newValue = computer(key, currentValue);\r\n        if (newValue !== undefined) {\r\n            this.set(key, newValue);\r\n        }\r\n        else {\r\n            this.delete(key);\r\n        }\r\n        return newValue;\r\n    }\r\n    /**\r\n     * Computes a value for given key, the computer can return a value V (in which case the map\r\n     * will set the value for given key), if it returns undefined the mapping for key K will be\r\n     * removed.\r\n     * @param key Key to compute\r\n     * @param computer Computer which is called, note that the currentValue argument contains the existing\r\n     *                 value or is undefined when no mapping exists for the key.\r\n     * @return The newly computed value\r\n     */\r\n    compute(key, computer) {\r\n        const currentValue = this.get(key);\r\n        const newValue = computer(key, currentValue);\r\n        if (newValue) {\r\n            this.set(key, newValue);\r\n        }\r\n        else {\r\n            this.delete(key);\r\n        }\r\n        return newValue;\r\n    }\r\n}\n\n/**\r\n * Internal log level (note: do NOT use LogLevel, or we get circular loading issues!)\r\n */\r\nvar InternalLogLevel;\r\n(function (InternalLogLevel) {\r\n    InternalLogLevel[InternalLogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    InternalLogLevel[InternalLogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    InternalLogLevel[InternalLogLevel[\"Info\"] = 2] = \"Info\";\r\n    InternalLogLevel[InternalLogLevel[\"Warn\"] = 3] = \"Warn\";\r\n    InternalLogLevel[InternalLogLevel[\"Error\"] = 4] = \"Error\";\r\n})(InternalLogLevel || (InternalLogLevel = {}));\r\n/**\r\n * Internal logger, this is NOT for end users. Instead this is used to enable logging for typescript-logging itself in case of problems.\r\n *\r\n * @param name Name of logger\r\n */\r\nfunction getInternalLogger(name) {\r\n    return provider.getLogger(name);\r\n}\r\n/**\r\n * Can be used to change the *internal* logging of the library.\r\n * Has no effect on end user logging.\r\n *\r\n * As such should normally not be used by end users.\r\n */\r\nconst INTERNAL_LOGGING_SETTINGS = {\r\n    /**\r\n     * Changes the log level for the internal logging (for all new and existing loggers)\r\n     * @param level New log level\r\n     */\r\n    setInternalLogLevel: (level) => provider.changeLogLevel(level),\r\n    /**\r\n     * Changes where messages are written to for all new and existing loggers),\r\n     * by default they are written to the console.\r\n     * @param fnOutput Function to write messages to\r\n     */\r\n    setOutput: (fnOutput) => provider.changeOutput(fnOutput),\r\n    /**\r\n     * Resets the log level and output back to defaults (level to error and writing to console)\r\n     * for all new and existing loggers.\r\n     */\r\n    reset: () => provider.reset(),\r\n};\r\nclass InternalLoggerImpl {\r\n    constructor(name, level, fnOutput) {\r\n        this._name = name;\r\n        this._level = level;\r\n        this._fnOutput = fnOutput;\r\n    }\r\n    trace(msg) {\r\n        this.log(InternalLogLevel.Trace, msg);\r\n    }\r\n    debug(msg) {\r\n        this.log(InternalLogLevel.Debug, msg);\r\n    }\r\n    error(msg, error) {\r\n        this.log(InternalLogLevel.Error, msg, error);\r\n    }\r\n    info(msg) {\r\n        this.log(InternalLogLevel.Info, msg);\r\n    }\r\n    warn(msg, error) {\r\n        this.log(InternalLogLevel.Warn, msg, error);\r\n    }\r\n    setLevel(level) {\r\n        this._level = level;\r\n    }\r\n    setOutput(fnOutput) {\r\n        this._fnOutput = fnOutput;\r\n    }\r\n    log(level, msg, error) {\r\n        if (this._level > level) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        this._fnOutput(`${InternalLogLevel[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${msg()}${error ? \"\\n\" + error.stack : \"\"}`);\r\n    }\r\n}\r\nclass InternalProviderImpl {\r\n    constructor() {\r\n        this._loggers = new EnhancedMap();\r\n        this._logLevel = InternalLogLevel.Error;\r\n        this._fnOutput = InternalProviderImpl.logConsole;\r\n    }\r\n    getLogger(name) {\r\n        return this._loggers.computeIfAbsent(name, key => new InternalLoggerImpl(key, this._logLevel, this._fnOutput));\r\n    }\r\n    changeLogLevel(level) {\r\n        this._logLevel = level;\r\n        this._loggers.forEach(logger => logger.setLevel(level));\r\n    }\r\n    changeOutput(_fnOutput) {\r\n        this._fnOutput = _fnOutput;\r\n        this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\r\n    }\r\n    reset() {\r\n        this.changeLogLevel(InternalLogLevel.Error);\r\n        this._fnOutput = InternalProviderImpl.logConsole;\r\n        this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\r\n    }\r\n    static logConsole(msg) {\r\n        // tslint:disable-next-line:no-console\r\n        if (console && console.log) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(msg);\r\n        }\r\n    }\r\n}\r\nconst provider = new InternalProviderImpl();\n\nvar InternalLogger = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  get InternalLogLevel () { return InternalLogLevel; },\n  getInternalLogger: getInternalLogger,\n  INTERNAL_LOGGING_SETTINGS: INTERNAL_LOGGING_SETTINGS\n});\n\n/**\r\n * Log level for a logger.\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    // Do not reverse/change order, a test relies on it.\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\r\n})(LogLevel || (LogLevel = {}));\r\n/* tslint:disable:no-namespace */\r\n(function (LogLevel) {\r\n    /**\r\n     * Convert given value to LogLevel, if not matching returns undefined.\r\n     * @param val Value to convert\r\n     */\r\n    function toLogLevel(val) {\r\n        switch (val.toLowerCase()) {\r\n            case \"trace\":\r\n                return LogLevel.Trace;\r\n            case \"debug\":\r\n                return LogLevel.Debug;\r\n            case \"info\":\r\n                return LogLevel.Info;\r\n            case \"warn\":\r\n                return LogLevel.Warn;\r\n            case \"error\":\r\n                return LogLevel.Error;\r\n            case \"fatal\":\r\n                return LogLevel.Fatal;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n    LogLevel.toLogLevel = toLogLevel;\r\n})(LogLevel || (LogLevel = {}));\r\n/* tslint:disable:enable-namespace */\n\n/**\r\n * Standard logger implementation that provides the basis for all loggers.\r\n */\r\nclass CoreLoggerImpl {\r\n    constructor(runtime) {\r\n        this._runtime = runtime;\r\n    }\r\n    get id() {\r\n        return this._runtime.id;\r\n    }\r\n    get logLevel() {\r\n        return this._runtime.level;\r\n    }\r\n    get runtimeSettings() {\r\n        /* Return it as new literal, we don't want people to play with our internal state */\r\n        return Object.assign({}, this._runtime);\r\n    }\r\n    set runtimeSettings(runtime) {\r\n        this._runtime = runtime;\r\n    }\r\n    trace(message, ...args) {\r\n        this.logMessage(LogLevel.Trace, message, args);\r\n    }\r\n    debug(message, ...args) {\r\n        this.logMessage(LogLevel.Debug, message, args);\r\n    }\r\n    info(message, ...args) {\r\n        this.logMessage(LogLevel.Info, message, args);\r\n    }\r\n    warn(message, ...args) {\r\n        this.logMessage(LogLevel.Warn, message, args);\r\n    }\r\n    error(message, ...args) {\r\n        this.logMessage(LogLevel.Error, message, args);\r\n    }\r\n    fatal(message, ...args) {\r\n        this.logMessage(LogLevel.Fatal, message, args);\r\n    }\r\n    logMessage(level, logMessageType, args) {\r\n        if (this._runtime.level > level) {\r\n            return;\r\n        }\r\n        const nowMillis = Date.now();\r\n        const message = typeof logMessageType === \"string\" ? logMessageType : logMessageType();\r\n        const errorAndArgs = CoreLoggerImpl.getErrorAndArgs(args);\r\n        /*\r\n         * Deal with raw message here.\r\n         */\r\n        switch (this._runtime.channel.type) {\r\n            case \"RawLogChannel\":\r\n                this._runtime.channel.write({\r\n                    message,\r\n                    exception: errorAndArgs.error,\r\n                    args: errorAndArgs.args,\r\n                    timeInMillis: nowMillis,\r\n                    level,\r\n                    logNames: this._runtime.name,\r\n                }, this._runtime.argumentFormatter);\r\n                return;\r\n            case \"LogChannel\":\r\n                this._runtime.channel.write(this.createLogMessage(message, level, errorAndArgs, nowMillis));\r\n                break;\r\n        }\r\n    }\r\n    formatArgValue(value) {\r\n        try {\r\n            return this._runtime.argumentFormatter(value);\r\n        }\r\n        catch (e) {\r\n            // We don't really care what failed, except that the convert function failed.\r\n            return `>>ARG CONVERT FAILED: '${value !== undefined ? value.toString() : \"undefined\"}'<<`;\r\n        }\r\n    }\r\n    createLogMessage(message, level, errorAndArgs, nowMillis) {\r\n        let errorResult;\r\n        const error = errorAndArgs.error;\r\n        const args = errorAndArgs.args;\r\n        if (error) {\r\n            errorResult = `${error.name}: ${error.message}`;\r\n            if (error.stack) {\r\n                errorResult += `@\\n${error.stack}`;\r\n            }\r\n        }\r\n        /*\r\n         * We need to add the date, and log names (in front of the now formatted message).\r\n         * Finally we also need to format any additional arguments and append after the message.\r\n         */\r\n        const dateFormatted = this._runtime.dateFormatter(nowMillis);\r\n        let levelAsStr = LogLevel[level].toUpperCase();\r\n        if (levelAsStr.length < 5) {\r\n            levelAsStr += \" \";\r\n        }\r\n        const names = typeof this._runtime.name === \"string\" ? this._runtime.name : this._runtime.name.join(\", \");\r\n        const argsFormatted = typeof args !== \"undefined\" && args.length > 0 ? (\" [\" + (args.map(arg => this.formatArgValue(arg))).join(\", \") + \"]\") : \"\";\r\n        const completedMessage = dateFormatted + \" \" + levelAsStr + \" [\" + names + \"] \" + message + argsFormatted;\r\n        return {\r\n            message: completedMessage,\r\n            error: errorResult,\r\n        };\r\n    }\r\n    static getErrorAndArgs(args) {\r\n        /*\r\n          The args are optional, but the first entry may be an Error or a function to an Error, or finally be a function to extra arguments.\r\n          The last is only true, if the length of args === 1, otherwise we expect args starting at pos 1 and further to be just that - args.\r\n         */\r\n        if (args.length === 0) {\r\n            return {};\r\n        }\r\n        let error;\r\n        let actualArgs;\r\n        const value0 = args[0];\r\n        /* If the first argument is an Error, we can stop straight away, the rest are additional arguments then if any */\r\n        if (value0 instanceof Error) {\r\n            error = value0;\r\n            actualArgs = args.length > 1 ? args.slice(1) : undefined;\r\n            return { error, args: actualArgs };\r\n        }\r\n        /* If the first argument is a function, it means either it will return the Error, or if the array length === 1 a function, returning the arguments */\r\n        if (typeof value0 === \"function\") {\r\n            const errorOrArgs = value0();\r\n            if (errorOrArgs instanceof Error) {\r\n                error = errorOrArgs;\r\n                actualArgs = args.length > 1 ? args.slice(1) : undefined;\r\n                return { error, args: actualArgs };\r\n            }\r\n            if (args.length === 1) {\r\n                /* The first argument was a function, we assume it returned the extra argument(s) */\r\n                if (Array.isArray(errorOrArgs)) {\r\n                    return { args: errorOrArgs.length > 0 ? errorOrArgs : undefined };\r\n                }\r\n                else {\r\n                    /* No idea what was returned we just assume a single value */\r\n                    return { args: errorOrArgs };\r\n                }\r\n            }\r\n            else {\r\n                /*\r\n                  This is a weird situation but there's no way to avoid it, the first argument was a function but did not return an Error and the args are > 1,\r\n                  so just add the args returned, as well as any remaining.\r\n                */\r\n                if (Array.isArray(errorOrArgs)) {\r\n                    return { args: [...errorOrArgs, ...args.slice(1)] };\r\n                }\r\n                return { args: [errorOrArgs, ...args.slice(1)] };\r\n            }\r\n        }\r\n        /* All args are ordinary arguments, or at least the first arg was not an Error or a Function, so we add all as args */\r\n        return { args };\r\n    }\r\n}\n\n/**\r\n * Pad given value with given fillChar from the beginning (default is an empty space)\r\n * @param value Value to pad\r\n * @param length The length the string must be\r\n * @param fillChar The padding char (1 char length allowed only)\r\n * @return Padded string or the same string if it is already of given length (or larger).\r\n */\r\nfunction padStart(value, length, fillChar = \" \") {\r\n    return padInternal(value, length, \"start\", fillChar);\r\n}\r\n/**\r\n * Pad given value with given fillChar from the end (default is an empty space)\r\n * @param value Value to pad\r\n * @param length The length the string must be\r\n * @param fillChar The padding char (1 char length allowed only)\r\n * @return Padded string or the same string if it is already of given length (or larger).\r\n */\r\nfunction padEnd(value, length, fillChar = \" \") {\r\n    return padInternal(value, length, \"end\", fillChar);\r\n}\r\n/**\r\n * Returns the max length of a string value in given array\r\n * @param arr Array to check\r\n * @return Max length, 0 if array is empty\r\n */\r\nfunction maxLengthStringValueInArray(arr) {\r\n    return arr\r\n        .map(v => v.length)\r\n        .reduce((previous, current) => {\r\n        if (current > previous) {\r\n            return current;\r\n        }\r\n        return previous;\r\n    }, 0);\r\n}\r\nfunction padInternal(value, length, padType, fillChar = \" \") {\r\n    if (length <= value.length) {\r\n        return value;\r\n    }\r\n    if (fillChar.length > 1) {\r\n        throw new Error(`Fill char must be one char exactly, it is: ${fillChar.length}`);\r\n    }\r\n    const charsNeeded = length - value.length;\r\n    let padding = \"\";\r\n    for (let i = 0; i < charsNeeded; i++) {\r\n        padding += fillChar;\r\n    }\r\n    if (padType === \"start\") {\r\n        return padding + value;\r\n    }\r\n    return value + padding;\r\n}\n\n/**\r\n * Default argument formatter function, used by the library, see {@link ArgumentFormatterType}.\r\n * Can be used by an end user as well if needed.\r\n * @param arg The argument to format\r\n * @returns argument stringified to string (JSON.stringify), if arg is undefined returns \"undefined\" (without quotes).\r\n */\r\nfunction formatArgument(arg) {\r\n    if (arg === undefined) {\r\n        return \"undefined\";\r\n    }\r\n    return JSON.stringify(arg);\r\n}\r\n/**\r\n * Default date formatter function, used by the library, see {@link DateFormatterType}.\r\n * Can be used by an end user as well if needed.\r\n * @param millisSinceEpoch Milliseconds since epoch\r\n * @returns The date in format: yyyy-MM-dd HH:mm:ss,SSS (example: 2021-02-26 09:06:28,123)\r\n */\r\nfunction formatDate(millisSinceEpoch) {\r\n    const date = new Date(millisSinceEpoch);\r\n    const year = date.getFullYear();\r\n    const month = padStart((date.getMonth() + 1).toString(), 2, \"0\");\r\n    const day = padStart(date.getDate().toString(), 2, \"0\");\r\n    const hours = padStart(date.getHours().toString(), 2, \"0\");\r\n    const minutes = padStart(date.getMinutes().toString(), 2, \"0\");\r\n    const seconds = padStart(date.getSeconds().toString(), 2, \"0\");\r\n    const millis = padStart(date.getMilliseconds().toString(), 2, \"0\");\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds},${millis}`;\r\n}\n\n/* tslint:disable:no-console */\r\n/**\r\n * Default standard LogChannel which logs to console.\r\n */\r\nclass ConsoleLogChannel {\r\n    constructor() {\r\n        this.type = \"LogChannel\";\r\n    }\r\n    write(msg) {\r\n        if (console && console.log) {\r\n            console.log(msg.message + (msg.error ? `\\n${msg.error}` : \"\"));\r\n        }\r\n    }\r\n}\n\n/* tslint:disable:no-namespace */\r\n/**\r\n * Provides access to various default channels provided by typescript logging.\r\n */\r\nvar DefaultChannels;\r\n(function (DefaultChannels) {\r\n    /**\r\n     * Create a new standard LogChannel that logs to the console.\r\n     */\r\n    function createConsoleChannel() {\r\n        return new ConsoleLogChannel();\r\n    }\r\n    DefaultChannels.createConsoleChannel = createConsoleChannel;\r\n})(DefaultChannels || (DefaultChannels = {}));\n\n/**\r\n * Implementation for {@link LogProvider}\r\n */\r\nclass LogProviderImpl {\r\n    constructor(name, settings) {\r\n        this._log = getInternalLogger(\"core.impl.LogProviderImpl\");\r\n        this._name = name;\r\n        this._settings = settings;\r\n        this._loggers = new EnhancedMap();\r\n        this._idToKeyMap = new EnhancedMap();\r\n        this._globalRuntimeSettings = { level: settings.level, channel: settings.channel };\r\n        this._nextLoggerId = 1;\r\n        this._log.trace(() => `Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`);\r\n    }\r\n    get runtimeSettings() {\r\n        return Object.assign(Object.assign({}, this._settings), { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel });\r\n    }\r\n    getLogger(name) {\r\n        return this.getOrCreateLogger(name);\r\n    }\r\n    updateLoggerRuntime(log, settings) {\r\n        this._log.debug(() => `Updating logger ${log.id} runtime settings using: '${JSON.stringify(settings)}'`);\r\n        const key = this._idToKeyMap.get(log.id);\r\n        if (key === undefined) {\r\n            this._log.warn(() => `Cannot update logger with id: ${log.id}, it was not found.`);\r\n            return false;\r\n        }\r\n        this._loggers.computeIfPresent(key, (currentKey, currentValue) => {\r\n            currentValue.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(currentValue.runtimeSettings, settings);\r\n            return currentValue;\r\n        });\r\n        return true;\r\n    }\r\n    updateRuntimeSettings(settings) {\r\n        this._log.debug(() => `Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(settings)}'`);\r\n        this._globalRuntimeSettings = {\r\n            /*\r\n             * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\r\n             * behavior of javascript where 0 is seen as false.\r\n             */\r\n            level: settings.level !== undefined ? settings.level : this._globalRuntimeSettings.level,\r\n            channel: settings.channel !== undefined ? settings.channel : this._globalRuntimeSettings.channel,\r\n        };\r\n        this._loggers.forEach(logger => logger.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(logger.runtimeSettings, settings));\r\n    }\r\n    /**\r\n     * Removes all state and loggers, it reverts back to as it was after initial construction.\r\n     */\r\n    clear() {\r\n        this._loggers.clear();\r\n        this._idToKeyMap.clear();\r\n        this._globalRuntimeSettings = Object.assign({}, this._settings);\r\n        this._nextLoggerId = 1;\r\n    }\r\n    getOrCreateLogger(name) {\r\n        const key = LogProviderImpl.createKey(name);\r\n        const logger = this._loggers.computeIfAbsent(key, () => {\r\n            const runtime = {\r\n                level: this._globalRuntimeSettings.level,\r\n                channel: this._globalRuntimeSettings.channel,\r\n                id: this.nextLoggerId(),\r\n                name,\r\n                argumentFormatter: this._settings.argumentFormatter,\r\n                dateFormatter: this._settings.dateFormatter,\r\n            };\r\n            return new CoreLoggerImpl(runtime);\r\n        });\r\n        this._idToKeyMap.computeIfAbsent(logger.id, () => key);\r\n        return logger;\r\n    }\r\n    nextLoggerId() {\r\n        const result = this._name + \"_\" + this._nextLoggerId;\r\n        this._nextLoggerId++;\r\n        return result;\r\n    }\r\n    static mergeRuntimeSettingsIntoLogRuntime(currentSettings, settings) {\r\n        return Object.assign(Object.assign({}, currentSettings), { \r\n            /*\r\n             * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\r\n             * behavior of javascript where 0 is seen as false.\r\n             */\r\n            level: settings.level !== undefined ? settings.level : currentSettings.level, channel: settings.channel !== undefined ? settings.channel : currentSettings.channel });\r\n    }\r\n    static createKey(name) {\r\n        if (typeof name === \"string\") {\r\n            return name;\r\n        }\r\n        return name.join(\",\");\r\n    }\r\n}\n\n/**\r\n * Create a new LogProvider, this is for flavor usage only. End users should not\r\n * use this and instead use whatever the flavor offers to build some config and\r\n * get loggers from there.\r\n */\r\nfunction createLogProvider(name, settings) {\r\n    return new LogProviderImpl(name, settings);\r\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  EnhancedMap: EnhancedMap,\n  padStart: padStart,\n  padEnd: padEnd,\n  maxLengthStringValueInArray: maxLengthStringValueInArray\n});\n\n/**\r\n * LogChannel that pushes log messages to a buffer.\r\n */\r\nclass ArrayLogChannel {\r\n    constructor() {\r\n        this._buffer = [];\r\n        this.type = \"LogChannel\";\r\n    }\r\n    write(msg) {\r\n        this._buffer.push(msg);\r\n    }\r\n    get logMessages() {\r\n        return this._buffer;\r\n    }\r\n    get messages() {\r\n        return this._buffer.map(msg => msg.message);\r\n    }\r\n}\r\n/**\r\n * RawLogChannel that pushes raw log messages to a buffer.\r\n */\r\nclass ArrayRawLogChannel {\r\n    constructor() {\r\n        this._buffer = [];\r\n        this.type = \"RawLogChannel\";\r\n    }\r\n    write(msg, _) {\r\n        this._buffer.push(msg);\r\n    }\r\n    get messages() {\r\n        return this._buffer.map(m => m.message);\r\n    }\r\n    get errors() {\r\n        return this._buffer.map(m => m.exception);\r\n    }\r\n    get size() {\r\n        return this._buffer.length;\r\n    }\r\n    get rawMessages() {\r\n        return this._buffer;\r\n    }\r\n    clear() {\r\n        this._buffer = [];\r\n    }\r\n}\r\n/**\r\n * Test class to help test the log control.\r\n */\r\nclass TestControlMessage {\r\n    constructor() {\r\n        this._messages = [];\r\n        this.write = this.write.bind(this);\r\n    }\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n    write(msg) {\r\n        this._messages.push(msg);\r\n    }\r\n    clear() {\r\n        this._messages = [];\r\n    }\r\n}\n\nvar TestClasses = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArrayLogChannel: ArrayLogChannel,\n  ArrayRawLogChannel: ArrayRawLogChannel,\n  TestControlMessage: TestControlMessage\n});\n\nexport { InternalLogger as $internal, TestClasses as $test, DefaultChannels, LogLevel, createLogProvider, formatArgument, formatDate, index as util };\n//# sourceMappingURL=typescript-logging.esm.js.map\n","import {Category} from \"../api/Category\";\nimport {CoreLogger, ExceptionType, LogLevel, LogMessageType} from \"typescript-logging\";\n\n/**\n * Implementation for Category.\n */\nexport class CategoryImpl implements Category {\n\n  private readonly _logger: CoreLogger;\n  private readonly _name: string;\n  private readonly _parent: Category | undefined;\n  private readonly _fnGetOrCreateChildCategory: (name: string, parent: Category) => Category;\n  private readonly _children: Category [] = [];\n\n  public constructor(logger: CoreLogger, name: string, parent: Category | undefined, fnGetOrCreateChildCategory: (name: string, parent: Category) => Category) {\n    this._logger = logger;\n    this._name = name;\n    this._parent = parent;\n    this._fnGetOrCreateChildCategory = fnGetOrCreateChildCategory;\n  }\n\n  public get name() {\n    return this._name;\n  }\n\n  public get parent() {\n    return this._parent;\n  }\n\n  public get path(): ReadonlyArray<string> {\n    const result: string[] = [];\n\n    let tmpCat: Category | undefined = this;\n    while (tmpCat !== undefined) {\n      result.push(tmpCat.name);\n      tmpCat = tmpCat.parent;\n    }\n\n    return result.reverse();\n  }\n\n  public get children(): ReadonlyArray<Category> {\n    return [...this._children];\n  }\n\n  public addChild(childCategory: Category) {\n    /* The parent of the child can only be set in the constructor, but verify it's our instance */\n    if (childCategory.parent !== this) {\n      throw new Error(`Cannot add child '${childCategory.name}', expected parent '${this._name} but got ${childCategory.parent ? childCategory.parent.name : \"undefined\"}'`);\n    }\n    this._children.push(childCategory);\n  }\n\n  public getChildCategory(name: string): Category {\n    const existing = this._children.find(c => c.name === name);\n    if (existing !== undefined) {\n      return existing;\n    }\n    return this._fnGetOrCreateChildCategory(name, this);\n  }\n\n  public get id() {\n    return this._logger.id;\n  }\n\n  public get logLevel(): LogLevel {\n    return this._logger.logLevel;\n  }\n\n  public get runtimeSettings() {\n    return this._logger.runtimeSettings;\n  }\n\n  public get logger() {\n    return this._logger;\n  }\n\n  public trace(message: LogMessageType, ...args: unknown[]): void;\n  public trace(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public trace(message: LogMessageType, ...args: unknown[]): void {\n    this._logger.trace(message, ...args);\n  }\n\n  public debug(message: LogMessageType, ...args: unknown[]): void;\n  public debug(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public debug(message: LogMessageType, ...args: unknown[]): void {\n    this._logger.debug(message, ...args);\n  }\n\n  public info(message: LogMessageType, ...args: unknown[]): void;\n  public info(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public info(message: LogMessageType, ...args: unknown[]): void {\n    this._logger.info(message, ...args);\n  }\n\n  public warn(message: LogMessageType, ...args: unknown[]): void;\n  public warn(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public warn(message: LogMessageType, ...args: unknown[]): void {\n    this._logger.warn(message, ...args);\n  }\n\n  public error(message: LogMessageType, ...args: unknown[]): void;\n  public error(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public error(message: LogMessageType, ...args: unknown[]): void {\n    this._logger.error(message, ...args);\n  }\n\n  public fatal(message: LogMessageType, ...args: unknown[]): void;\n  public fatal(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public fatal(message: LogMessageType, ...args: unknown[]): void {\n    this._logger.fatal(message, ...args);\n  }\n}\n","import {CategoryProvider} from \"../api/CategoryProvider\";\nimport {CategoryConfig} from \"../api/CategoryConfig\";\nimport {Category} from \"../api/Category\";\nimport {createLogProvider, LogId, LogProvider, RuntimeSettings} from \"typescript-logging\";\nimport {CategoryImpl} from \"./CategoryImpl\";\nimport {CategoryRuntimeSettings} from \"../api/CategoryRuntimeSettings\";\n\n/**\n * The separator we use in a path for a category, this cannot be used in a name for a category.\n */\nexport const CATEGORY_PATH_SEPARATOR = \"#\";\n\n/**\n * Implementation for CategoryProvider.\n */\nexport class CategoryProviderImpl implements CategoryProvider {\n\n  private readonly _name: string;\n  private readonly _initialConfig: CategoryConfig;\n  private readonly _categoryStorage: CategoryStorage;\n\n  public constructor(name: string, config: CategoryConfig) {\n    this._name = name;\n    this._initialConfig = config;\n    this._categoryStorage = new CategoryStorage(name, config);\n  }\n\n  public get name() {\n    return this._name;\n  }\n\n  public get config(): CategoryConfig {\n    return this._initialConfig;\n  }\n\n  public get runtimeConfig(): CategoryConfig {\n    return this._categoryStorage.getCurrentRuntimeConfig();\n  }\n\n  public getCategory(name: string, parent?: LogId | Category): Category {\n    return this._categoryStorage.getOrCreateCategory(name, parent);\n  }\n\n  public updateRuntimeSettingsCategory(category: Category, settings: CategoryRuntimeSettings): void {\n    this._categoryStorage.updateRuntimeSettingsCategory(category, settings);\n  }\n\n  public updateRuntimeSettings(settings: RuntimeSettings): void {\n    this._categoryStorage.updateRuntimeSettings(settings);\n  }\n\n  /** Returns all currently registered categories */\n  public getRegisteredCategories(): ReadonlyArray<Category> {\n    return this._categoryStorage.getRegisteredCategories();\n  }\n\n  /** Get a category by path, note that paths must be separated by #, e.g. root#child1#child1_1 */\n  public getCategoryByPath(path: string): Category | undefined {\n    return this._categoryStorage.getCategoryByPath(path);\n  }\n}\n\nclass CategoryStorage {\n\n  private readonly _categoryProviderName: string;\n  private readonly _allowSameCategoryName: boolean;\n  private readonly _logProvider: LogProvider;\n\n  private readonly _categoriesById = new Map<LogId, CategoryImpl>();\n  private readonly _categoriesByPath = new Map<string, CategoryImpl>();\n\n  public constructor(categoryProviderName: string, config: CategoryConfig) {\n    this._categoryProviderName = categoryProviderName;\n    this._allowSameCategoryName = config.allowSameCategoryName;\n    this._logProvider = createLogProvider(categoryProviderName, {...config});\n    this.getOrCreateCategory = this.getOrCreateCategory.bind(this);\n  }\n\n  public getOrCreateCategory(name: string, parent?: LogId | Category): Category {\n    if (name.indexOf(CATEGORY_PATH_SEPARATOR) !== -1) {\n      throw new Error(`Cannot create category '${name}', name cannot contain a '${CATEGORY_PATH_SEPARATOR}'.`);\n    }\n\n    const parentCategory = parent !== undefined ? this.getParentCategory(parent) : undefined;\n    if (parentCategory === undefined) {\n      return this.getOrCreateRootCategory(name);\n    }\n\n    return this.getOrCreateChildCategory(name, parentCategory);\n  }\n\n  public updateRuntimeSettingsCategory(category: Category, settings: CategoryRuntimeSettings): void {\n    /* Verify that the category originates from our provider */\n    if (!category.id.startsWith(this._categoryProviderName)) {\n      throw new Error(`Category '${category.name}' with LogId '${category.id}' is from a different CategoryProvider, cannot mix categories between providers.`);\n    }\n\n    const categoryImpl = this._categoriesById.get(category.id);\n    if (categoryImpl === undefined) {\n      return;\n    }\n\n    this._logProvider.updateLoggerRuntime(categoryImpl.logger, {level: settings.level});\n\n    /* Recurse children if needed */\n    if (settings.disableRecursion !== undefined && settings.disableRecursion) {\n      return;\n    }\n\n    categoryImpl.children.forEach(childCategory => this.updateRuntimeSettingsCategory(childCategory, settings));\n  }\n\n  public updateRuntimeSettings(settings: RuntimeSettings) {\n    this._logProvider.updateRuntimeSettings(settings);\n  }\n\n  public getCurrentRuntimeConfig(): CategoryConfig {\n    return {\n      ...this._logProvider.runtimeSettings,\n      allowSameCategoryName: this._allowSameCategoryName\n    };\n  }\n\n  /** Returns all currently registered categories */\n  public getRegisteredCategories(): ReadonlyArray<Category> {\n    return [...this._categoriesById.values()];\n  }\n\n  /** Get a category by path, note that paths must be separated by #, e.g. root#child1#child1_1 */\n  public getCategoryByPath(path: string): Category | undefined {\n    return this._categoriesByPath.get(path);\n  }\n\n  private getParentCategory(parent: LogId | Category): CategoryImpl {\n    let parentCategory: CategoryImpl | undefined;\n    if (CategoryStorage.isLogId(parent)) {\n      parentCategory = this._categoriesById.get(parent);\n      if (parentCategory === undefined) {\n        throw new Error(`Parent category was not found by LogId '${parent}'. Are you sure you passed in the correct argument?`);\n      }\n    }\n    else {\n      parentCategory = this._categoriesById.get(parent.id);\n      if (parentCategory === undefined) {\n        throw new Error(`Parent category '${parent.name}' was not found by it's LogId '${parent.id}'. Are you sure you passed in the correct parent category?`);\n      }\n    }\n    return parentCategory;\n  }\n\n  private getOrCreateRootCategory(name: string) {\n    /* It's a root category, does it exist already? */\n    const existingCategory = this._categoriesByPath.get(name);\n    if (existingCategory) {\n      if (!this._allowSameCategoryName) {\n        throw new Error(`Category '${name} already exists, config flag allowSameCategoryName=false - therefore matching version 1 behavior (hence this Error)`);\n      }\n      return existingCategory;\n    }\n\n    /* Creating a root category */\n    const logger = this._logProvider.getLogger(name);\n    const category = new CategoryImpl(logger, name, undefined, this.getOrCreateCategory);\n    this._categoriesById.set(category.id, category);\n    this._categoriesByPath.set(name, category);\n    return category;\n  }\n\n  private getOrCreateChildCategory(name: string, parentCategory: CategoryImpl) {\n    /* Verify that the parent category originates from our provider */\n    if (!parentCategory.id.startsWith(this._categoryProviderName)) {\n      throw new Error(`Parent category '${parentCategory.name}' with LogId '${parentCategory.id}' is from a different CategoryProvider, cannot mix categories between providers.`);\n    }\n\n    /* Create full path, parent path and child next */\n    const path = [...parentCategory.path, name].join(CATEGORY_PATH_SEPARATOR);\n\n    const existingChildCategory = this._categoriesByPath.get(path);\n    if (existingChildCategory) {\n      if (!this._allowSameCategoryName) {\n        throw new Error(`Child category '${name} already exists for parent category ${parentCategory.name}, config flag allowSameCategoryName=false - therefore matching version 1 behavior (hence this Error)`);\n      }\n      return existingChildCategory;\n    }\n\n    /* No child yet, create it */\n    const logger = this._logProvider.getLogger(path);\n\n    /* Apply the settings from the parent category, a child always gets what its parent has */\n    this._logProvider.updateLoggerRuntime(logger, {\n      level: parentCategory.logger.runtimeSettings.level,\n      channel: parentCategory.logger.runtimeSettings.channel,\n    });\n\n    const childCategory = new CategoryImpl(logger, name, parentCategory, this.getOrCreateCategory);\n    this._categoriesById.set(childCategory.id, childCategory);\n    this._categoriesByPath.set(childCategory.path.join(CATEGORY_PATH_SEPARATOR), childCategory);\n    parentCategory.addChild(childCategory);\n    return childCategory;\n  }\n\n  private static isLogId(parent: LogId | Category): parent is LogId {\n    return typeof parent === \"string\";\n  }\n}\n","import {CategoryControlProvider, CategoryControlProviderLogLevel} from \"../api/CategoryControlProvider\";\nimport {LogId, LogLevel, util} from \"typescript-logging\";\nimport {CATEGORY_PATH_SEPARATOR, CategoryProviderImpl} from \"./CategoryProviderImpl\";\nimport {Category} from \"../api/Category\";\n\n/**\n * Implementation of the CategoryControlProvider.\n */\nexport class CategoryControlProviderImpl implements CategoryControlProvider {\n\n  private readonly _provider: CategoryProviderImpl;\n  private readonly _messageChannel: (msg: string) => void;\n\n  /** Tracks the original log levels for all categories when they were created, updated only in reset() */\n  private _originalLogLevels: Map<LogId, LogLevel>;\n\n  public constructor(provider: CategoryProviderImpl, messageChannel: (msg: string) => void) {\n    this._provider = provider;\n    this._messageChannel = messageChannel;\n    this._originalLogLevels = CategoryControlProviderImpl.loadCurrentGroupLogLevels(provider);\n  }\n\n  public get name() {\n    return this._provider.name;\n  }\n\n  /**\n   * Shows current settings.\n   */\n  public showSettings(): void {\n    /*\n      We create this kind of output:\n\n      Available categories (CategoryProvider 'test'):\n        [0, root                level=Error]\n        [1, - child1            level=Warn ]\n        [2, - my awesome child  level=Error]\n        [3,   - another child   level=Error]\n        [4, anotherRoot         level=Error]\n        [5, - child x           level=Error]\n     */\n    let result = `Available categories (CategoryProvider '${this._provider.name}'):\\n`;\n\n    const categories = this.createCategoryInfoHierarchy();\n    const maxWidthIndex = categories.size.toString().length;\n    /* Note depth means on how deeply nested a child is, each depth is multiplied by 1 spaces (length) */\n    const maxWidthIdentifier = util.maxLengthStringValueInArray([...categories.values()].map(value => value.category.name + \" \".repeat(value.depth)));\n\n    const providerLines = [...categories.values()]\n      .map((category, idx) => CategoryControlProviderImpl.createSettingLineCategory(category, idx, maxWidthIndex, maxWidthIdentifier));\n\n    result += providerLines.join(\"\\n\") + (providerLines.length > 0 ? \"\\n\" : \"\");\n    this._messageChannel(result);\n  }\n\n  public help(): void {\n    const msg =\n      `You can use the following commands (CategoryProvider ${this._provider.name}):\\n` +\n      \"  showSettings()\\n\" +\n      \"    Shows the current configuration settings.\\n\" +\n      \"  update(level: CategoryControlProviderLogLevel, categoryId?: number | string, noRecurse?: boolean)\\n\" +\n      \"    Change the log level for a category (by default recursively).\\n\" +\n      \"      @param level      The log level to set - must be one of 'trace', 'debug', 'info', 'warn', 'error' or 'fatal'\\n\" +\n      \"      @param categoryId The category id or path of a category (e.g. root#child1) to update. Use showSettings() for id and/or name.\\n\" +\n      \"                        When omitted, it applies the level to all categories recursively.\\n\" +\n      \"  reset()\\n\" +\n      \"    Resets the log levels of the config groups back to when this control provider was created.\\n\" +\n      \"  save()\\n\" +\n      \"    Saves the current log levels for all categories of this provider. Use restore() to load last saved state.\\n\" +\n      \"  restore()\\n\" +\n      \"    Restore stored saved state, if any. Log levels will be set according to the saved state.\\n\" +\n      \"  help()\\n\" +\n      \"    Shows this help.\\n\";\n    this._messageChannel(msg);\n  }\n\n  public reset(): void {\n    const currentCategories = new Map<LogId, Category>(this._provider.getRegisteredCategories().map(cat => [cat.id, cat]));\n\n    /*\n     * For all stored categories, update them if we can still find them and remove them from \"currentCategories\".\n     */\n    this._originalLogLevels.forEach((value, key) => {\n      const category = currentCategories.get(key);\n      if (category !== undefined) {\n        this._provider.updateRuntimeSettingsCategory(category, {level: value, disableRecursion: true});\n      }\n      currentCategories.delete(key);\n    });\n\n    /*\n     * For any remaining categories (these are new compared to when originals were loaded), set their parent levels.\n     *\n     * This is just a best effort, we had no previous log levels available for them after all.\n     */\n    currentCategories.forEach(category => {\n      if (category.parent !== undefined) {\n        this._provider.updateRuntimeSettingsCategory(category, {level: category.parent.logLevel, disableRecursion: true});\n      }\n    });\n\n    /* Update the levels so we're up-to-date again */\n    this._originalLogLevels = CategoryControlProviderImpl.loadCurrentGroupLogLevels(this._provider);\n    this._messageChannel(\"Successfully reset log levels back to original state (from when this CategoryControlProvider was created).\");\n  }\n\n  public save(): void {\n    if (!localStorage) {\n      this._messageChannel(\"Cannot save state, localStorage is not available.\");\n      return;\n    }\n\n    const saveDataForAllRootCategories = this._provider.getRegisteredCategories()\n      .filter(cat => cat.parent === undefined)\n      .map(rootCategory => CategoryControlProviderImpl.createCategorySaveData(rootCategory));\n    const saveData: SaveData = {\n      name: this._provider.name,\n      rootCategories: saveDataForAllRootCategories,\n    };\n\n    localStorage.setItem(this.createKey(), JSON.stringify(saveData));\n    this._messageChannel(`Successfully saved state for CategoryControlProvider '${this._provider.name}'.`);\n  }\n\n  public restore(logRestoreFailures: boolean | undefined): void {\n    const finalLogRestoreFailures = logRestoreFailures !== undefined ? logRestoreFailures : true;\n    if (!localStorage) {\n      if (finalLogRestoreFailures) {\n        this._messageChannel(`Will not attempt to restore state for CategoryControlProvider '${this._provider.name}', localStorage is not available.`);\n      }\n      return;\n    }\n\n    const key = this.createKey();\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      if (finalLogRestoreFailures) {\n        this._messageChannel(`Cannot restore state for CategoryControlProvider '${this._provider.name}', no data available.`);\n      }\n      return;\n    }\n\n    try {\n      const savedData: SaveData = JSON.parse(value);\n      if (this._provider.name !== savedData.name) {\n        if (finalLogRestoreFailures) {\n          this._messageChannel(`Cannot restore state for CategoryControlProvider '${this._provider.name}', data is not for provider - found name '${savedData.name}'.`);\n        }\n        return;\n      }\n\n      this.restoreBySaveData(savedData, finalLogRestoreFailures);\n      this._messageChannel(`Successfully restored state for CategoryControlProvider '${this._provider.name}'`);\n      this._originalLogLevels = CategoryControlProviderImpl.loadCurrentGroupLogLevels(this._provider);\n    }\n    catch (e) {\n      localStorage.removeItem(key);\n      this._messageChannel(`Cannot restore state for CategoryControlProvider '${this._provider.name}', data is not valid. Invalid data removed from localStorage.`);\n    }\n  }\n\n  public update(level: CategoryControlProviderLogLevel, categoryId?: number | string, noRecurse?: boolean): void {\n    if (typeof categoryId === \"undefined\") {\n      this.updateAll(level);\n    }\n    else if (typeof categoryId === \"number\") {\n      this.updateByIndex(level, categoryId, noRecurse !== undefined ? noRecurse : false);\n    }\n    else {\n      this.updateByPath(level, categoryId, noRecurse !== undefined ? noRecurse : false);\n    }\n  }\n\n  private updateAll(level: CategoryControlProviderLogLevel) {\n    const logLevel = LogLevel.toLogLevel(level);\n    this._provider.getRegisteredCategories()\n      .filter(cat => cat.parent === undefined)\n      .forEach(cat => this._provider.updateRuntimeSettingsCategory(cat, {level: logLevel}));\n    this._messageChannel(`Updated all categories to use log level '${level.toLowerCase()}'`);\n  }\n\n  private updateByPath(level: CategoryControlProviderLogLevel, path: string, noRecurse: boolean) {\n    const category = this._provider.getCategoryByPath(path);\n    if (category === undefined) {\n      this._messageChannel(`Failed to find a provider by path '${path}', please make sure to separate the parts by a ${CATEGORY_PATH_SEPARATOR}.`);\n      return;\n    }\n    this._provider.updateRuntimeSettingsCategory(category, {level: LogLevel.toLogLevel(level), disableRecursion: noRecurse});\n    this._messageChannel(`Successfully updated category '${category.name}' with path '${path}' to log level '${level.toLowerCase()}'${noRecurse ? \"\" : \" and recursively applied to children (if any)\"}.`);\n  }\n\n  private updateByIndex(level: CategoryControlProviderLogLevel, index: number, noRecurse: boolean) {\n    if (index < 0) {\n      this._messageChannel(`Cannot update category by index '${index}', it is negative.`);\n      return;\n    }\n    const categories = this.createCategoryInfoHierarchy();\n    if (index >= categories.size) {\n      this._messageChannel(`Cannot update category by index '${index}', it is outside of the range of available categories, use showSettings() to see the indices.`);\n      return;\n    }\n\n    const category = [...categories.values()][index].category;\n    this._provider.updateRuntimeSettingsCategory(category, {level: LogLevel.toLogLevel(level), disableRecursion: noRecurse});\n    this._messageChannel(`Successfully updated category '${category.name}' by index '${index}' to log level '${level.toLowerCase()}'${noRecurse ? \"\" : \" and recursively applied to children (if any)\"}.`);\n  }\n\n  private restoreBySaveData(saveData: SaveData, logCannotRestore: boolean) {\n    const restoreCategory = (categorySaveData: CategorySaveData, currentPath: string) => {\n      const newPath = currentPath.length > 0 ? (currentPath + CATEGORY_PATH_SEPARATOR + categorySaveData.name) : categorySaveData.name;\n      const category = this._provider.getCategoryByPath(newPath);\n      if (category !== undefined) {\n        const newLevel = LogLevel.toLogLevel(categorySaveData.level);\n        if (newLevel !== undefined) {\n          this._provider.updateRuntimeSettingsCategory(category, {level: newLevel, disableRecursion: true});\n        }\n        else if (logCannotRestore) {\n          this._messageChannel(`CategoryControlProvider '${this._provider.name}' - cannot restore log level for category path '${newPath}', log level is invalid.`);\n        }\n\n        for (const childSaveData of categorySaveData.children) {\n          restoreCategory(childSaveData, newPath);\n        }\n      }\n      else if (logCannotRestore) {\n        this._messageChannel(`CategoryControlProvider '${this._provider.name}' - failed to find a Category by path '${newPath}', will not restore category (and children)`);\n      }\n    };\n\n    for (const rootSaveData of saveData.rootCategories) {\n      restoreCategory(rootSaveData, \"\");\n    }\n  }\n\n  private createKey(): string {\n    return `CategoryProvider-${this._provider.name}`;\n  }\n\n  private createCategoryInfoHierarchy(): Map<LogId, CategoryInfo> {\n    const result = new Map<LogId, CategoryInfo>();\n    const rootCategories = this._provider.getRegisteredCategories().filter(cat => cat.parent === undefined);\n    rootCategories.forEach(category => CategoryControlProviderImpl.addCategoryInfoHierarchy(category, 0, result));\n    return result;\n  }\n\n  private static createCategorySaveData(category: Category): CategorySaveData {\n    return {\n      name: category.name,\n      level: LogLevel[category.logLevel],\n      children: category.children.map(child => this.createCategorySaveData(child)),\n    };\n  }\n\n  private static loadCurrentGroupLogLevels(provider: CategoryProviderImpl): Map<LogId, LogLevel> {\n    return new Map<LogId, LogLevel>(provider.getRegisteredCategories().map(category => [category.id, category.logLevel]));\n  }\n\n  private static createSettingLineCategory(categoryInfo: CategoryInfo, index: number, maxWidthIndex: number, maxWidthIdentifier: number): string {\n    const prefix = \" \".repeat(categoryInfo.depth);\n    const catName = prefix + categoryInfo.category.name;\n    return `  [${util.padStart(index.toString(), maxWidthIndex)}, ${util.padEnd(catName, maxWidthIdentifier)} (level=${util.padEnd(categoryInfo.logLevel, 5)})]`;\n  }\n\n  private static addCategoryInfoHierarchy(category: Category, currentDepth: number, result: Map<LogId, CategoryInfo>) {\n    result.set(category.id, {\n      category,\n      logLevel: LogLevel[category.logLevel],\n      depth: currentDepth,\n    });\n    category.children.forEach(child => this.addCategoryInfoHierarchy(child, currentDepth + 1, result));\n  }\n}\n\ninterface CategoryInfo {\n  category: Category;\n  depth: number;\n  logLevel: string;\n}\n\ninterface SaveData {\n  /**\n   * Name of the provider.\n   */\n  name: string;\n  rootCategories: CategorySaveData[];\n}\n\ninterface CategorySaveData {\n  /**\n   * Category name.\n   */\n  name: string;\n  level: string;\n  children: CategorySaveData[];\n}\n","import {LogLevel} from \"typescript-logging\";\nimport {CategoryConfig} from \"../api/CategoryConfig\";\n\nexport function categoryConfigDebug(config: CategoryConfig) {\n  return `CategoryConfig=level: ${LogLevel[config.level].toString()}, allowSameCategoryName=${config.allowSameCategoryName}`;\n}\n","import {CategoryConfig, CategoryConfigOptional} from \"../api/CategoryConfig\";\nimport {CategoryProvider} from \"../api/CategoryProvider\";\nimport {CategoryProviderImpl} from \"./CategoryProviderImpl\";\nimport {$internal, DefaultChannels, formatArgument, formatDate, LogLevel, util} from \"typescript-logging\";\nimport {CategoryControl} from \"../api/CategoryControl\";\nimport {CategoryControlProvider} from \"../api/CategoryControlProvider\";\nimport {CategoryControlProviderImpl} from \"./CategoryControlProviderImpl\";\nimport {categoryConfigDebug} from \"../util/DebugUtil\";\n\n/**\n * Provider for the category flavor, each provider is a unique instance that can be used to\n * get categories/loggers from.\n */\nclass CategoryProviderService {\n\n  private readonly _log = $internal.getInternalLogger(\"category.impl.CategoryProviderService\");\n  private readonly _providers = new util.EnhancedMap<string, CategoryProviderImpl>();\n\n  public createLogProvider(name: string, config?: CategoryConfigOptional): CategoryProvider {\n    const result = this._providers.compute(name, (key, currentValue) => {\n      if (currentValue) {\n        throw new Error(`CategoryProvider with name '${name}' already exists, cannot create another.`);\n      }\n\n      const finalConfig = mergeWithDefaults(config);\n\n      this._log.debug(() => `Creating new CategoryProvider with name '${name}', using config settings '${categoryConfigDebug(finalConfig)}'.`);\n\n      return new CategoryProviderImpl(name, finalConfig);\n    });\n\n    if (result) {\n      return result;\n    }\n    throw new Error(\"No CategoryProvider? This is a bug.\");\n  }\n\n  public getCategoryControl(fnValue?: (msg: string) => void): CategoryControl {\n    const fnMessageChannel = fnValue ? fnValue : (value: string) => {\n      // tslint:disable-next-line:no-console\n      if (console && console.log) {\n        // tslint:disable-next-line:no-console\n        console.log(value);\n      }\n      else {\n        throw new Error(\"Cannot use console (it is not present), please specify a custom function to write to.\");\n      }\n    };\n\n    return {\n      help: () => fnMessageChannel(CategoryProviderService.help()),\n      showSettings: () => fnMessageChannel(this.showSettings()),\n      getProvider: (id: number | string): CategoryControlProvider => this.getCategoryControlProviderByIdOrName(id, fnMessageChannel),\n    };\n  }\n\n  public clear() {\n    this._providers.clear();\n  }\n\n  /* Functions for CategoryControl follow */\n\n  private showSettings(): string {\n    let result = \"Available CategoryProviders:\\n\";\n    const maxWidthIndex = this._providers.size.toString().length;\n    const maxWidthName: number = util.maxLengthStringValueInArray([...this._providers.keys()]);\n\n    const lines = [...this._providers.entries()].map((entry, index) => {\n      const name = entry[0];\n      /* [idx, name] */\n      return `  [${util.padStart(index.toString(), maxWidthIndex)}, ${util.padEnd(name, maxWidthName)}]`;\n    });\n\n    result += lines.join(\"\\n\") + (lines.length > 0 ? \"\\n\" : \"\");\n    return result;\n  }\n\n  private getCategoryControlProviderByIdOrName(id: number | string, messageChannel: (msg: string) => void): CategoryControlProvider {\n    if (typeof id === \"string\") {\n      const provider = this._providers.get(id);\n      if (provider === undefined) {\n        throw new Error(`Provider with name '${id}' does not exist.`);\n      }\n      return new CategoryControlProviderImpl(provider, messageChannel);\n    }\n\n    const providers = [...this._providers.values()];\n    if (id < 0 || id >= providers.length) {\n      throw new Error(`Provider with index '${id}' does not exist (outside of range).`);\n    }\n    return new CategoryControlProviderImpl(providers[id], messageChannel);\n  }\n\n  private static help(): string {\n    return \"You can use the following commands:\\n\" +\n      \"  showSettings()\\n\" +\n      \"    Shows the current configuration settings.\\n\" +\n      \"  getProvider: (id: number | string): CategoryControlProvider\\n\" +\n      \"    Get access to a CategoryControlProvider to change log levels.\\n\" +\n      \"      @param id The id (use showSettings to see) or name of the provider\\n\" +\n      \"  help()\\n\" +\n      \"    Shows this help.\\n\";\n  }\n}\n\n/**\n * Singleton instance to the service, for internal usage only. Must NOT be exported to end user.\n */\nexport const CATEGORY_PROVIDER_SERVICE = new CategoryProviderService();\nexport const CATEGORY_LOG_CONTROL: (fnValue?: (msg: string) => void) => CategoryControl = fnValue => CATEGORY_PROVIDER_SERVICE.getCategoryControl(fnValue);\n\nfunction mergeWithDefaults(config?: CategoryConfigOptional): CategoryConfig {\n  const defaultConfig: CategoryConfig = {\n    channel: DefaultChannels.createConsoleChannel(),\n    allowSameCategoryName: true,\n    level: LogLevel.Error,\n    dateFormatter: formatDate,\n    argumentFormatter: formatArgument,\n  };\n\n  if (!config) {\n    return defaultConfig;\n  }\n\n  return {\n    channel: config.channel ? config.channel : defaultConfig.channel,\n    allowSameCategoryName: config.allowSameCategoryName !== undefined ? config.allowSameCategoryName : defaultConfig.allowSameCategoryName,\n    level: config.level !== undefined ? config.level : defaultConfig.level,\n    dateFormatter: config.dateFormatter ? config.dateFormatter : defaultConfig.dateFormatter,\n    argumentFormatter: config.argumentFormatter ? config.argumentFormatter : defaultConfig.argumentFormatter,\n  };\n}\n","import {Category} from \"./Category\";\nimport {LogId, RuntimeSettings} from \"typescript-logging\";\nimport {CategoryConfig, CategoryConfigOptional} from \"./CategoryConfig\";\nimport {CATEGORY_PROVIDER_SERVICE} from \"../impl/CategoryProviderService\";\nimport {CategoryRuntimeSettings} from \"./CategoryRuntimeSettings\";\n\n/**\n * Provider for category flavor, can be used to get categories (loggers).\n *\n * To create a provider use: CategoryProvider.createProvider(...)\n */\nexport interface CategoryProvider {\n\n  /**\n   * The name of this provider.\n   */\n  readonly name: string;\n\n  /**\n   * Returns the *initial* config this provider was created with, this will always be the same. If you want to see\n   * the current configuration of this provider use runtimeConfig instead.\n   */\n  readonly config: CategoryConfig;\n\n  /**\n   * Returns the current runtime configuration for the provider, new root categories have this config initially applied.\n   * Any child categories always follow their parent's config. This represents the runtime configuration, not\n   * the initial configuration given to the provider (use config for that instead). This will match\n   * the initial config if the runtime config was never changed.\n   */\n  readonly runtimeConfig: CategoryConfig;\n\n  /**\n   * Get or create a category by given name, if the category does not exist yet it is created,\n   * otherwise an existing category is returned. When creating a child category it takes the settings\n   * from the parent, the root takes the runtimeConfig settings of the provider.\n   *\n   * Important: This behavior is different from version 1 of typescript-logging, in version 1 it throws an Error not\n   * allowing to create a category with the same name. The old behavior can be switched on by configuring the CategoryProvider\n   * (see CategoryConfiguration).\n   *\n   * @param name The name of the category\n   * @param parent When set must refer to either:\n   *               - Existing parent Category\n   *               - The id of a parent category (see field id on a Category/Logger).\n   */\n  readonly getCategory: (name: string, parent?: Category | LogId) => Category;\n\n  /**\n   * Applies given runtime settings to given category recursively (so all children) by default, recursion can optionally\n   * be disabled in the given settings.\n   *\n   * @param category The category to update the runtime settings for\n   * @param settings The settings to apply\n   */\n  readonly updateRuntimeSettingsCategory: (category: Category, settings: CategoryRuntimeSettings) => void;\n\n  /**\n   * Applies given runtime settings to all registered categories of this provider, this function also allows changing the log channel.\n   * Any newly created category afterwards will have these settings applied as well. This will *also* update the runtime configuration\n   * for this provider, meaning that new root loggers will use given settings from now on.\n   *\n   * <pre>\n   *   provider.updateRuntimeSettings({\n   *     level: LogLevel.Debug,\n   *     channel: new MyAwesomeChannel(),\n   *   });\n   * </pre>\n   */\n  readonly updateRuntimeSettings: (settings: RuntimeSettings) => void;\n}\n\n// tslint:disable-next-line:no-namespace\nexport namespace CategoryProvider {\n\n  /**\n   * Creates a new  provider with given name and configuration. If a provider\n   * with such name already exists, an Error will be thrown.\n   * @param name Name for provider, must be unique\n   * @param config The config for the provider, if not specified uses defaults (logging to console, with LogLevel=Error, ...).\n   */\n  export function createProvider(name: string, config?: CategoryConfigOptional): CategoryProvider {\n    return CATEGORY_PROVIDER_SERVICE.createLogProvider(name, config);\n  }\n\n  /**\n   * Resets and clears *all* created CategoryProviders, every category/logger that was retrieved previously\n   * will be invalid afterwards.\n   *\n   * This call essentially reverts the CategoryProvider back to it's initial state. This should normally not be used\n   * unless absolutely necessary.\n   */\n  export function clear() {\n    CATEGORY_PROVIDER_SERVICE.clear();\n  }\n}\n"],"names":["util","index","$internal"],"mappings":"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"}