{"version":3,"file":"typescript-logging.esm.js","sources":["../../src/typescript/main/util/EnhancedMap.ts","../../src/typescript/main/internal/InternalLogger.ts","../../src/typescript/main/core/api/LogLevel.ts","../../src/typescript/main/core/impl/CoreLoggerImpl.ts","../../src/typescript/main/util/StringUtil.ts","../../src/typescript/main/core/impl/DefaultFormatters.ts","../../src/typescript/main/core/impl/channel/ConsoleLogChannel.ts","../../src/typescript/main/core/impl/channel/DefaultChannels.ts","../../src/typescript/main/core/impl/LogProviderImpl.ts","../../src/typescript/main/core/index.ts","../../src/typescript/test/TestClasses.ts"],"sourcesContent":["/**\n * Extends Map and adds a few convenient functions.\n */\nexport class EnhancedMap<K,V> extends Map<K, V> {\n\n  /**\n   * If key has a mapping already returns the currently associated value. If\n   * there is no mapping, calls the computer which must return a value V.\n   * The value is then stored for given key and returned.\n   * @param key Key\n   * @param computer Computer which is called only if key has no mapping yet.\n   * @return Existing value if the key already existed, or the newly computed value.\n   */\n  public computeIfAbsent(key: K, computer: (currentKey: K) => V): V {\n    if (this.has(key)) {\n      return this.get(key) as V;\n    }\n    const newValue = computer(key);\n    this.set(key, newValue);\n    return newValue;\n  }\n\n  /**\n   * If the key exists already calls given computer, if the key does not exist\n   * this method does nothing.\n   *\n   * The computer is called with current key and current value associated. The\n   * computer can return a (new) value V or undefined. When undefined is returned\n   * the key is removed from this map, when a V is returned the key is updated\n   * with the new value V.\n   * @param key Key\n   * @param computer Computer which is called only if the key has a mapping already\n   * @return Undefined if the key has no mapping, otherwise the value returned from computer\n   */\n  public computeIfPresent(key: K, computer: (currentKey: K, currentValue: V) => V | undefined): V | undefined {\n    const currentValue = this.get(key);\n    if (currentValue === undefined) {\n      return undefined;\n    }\n\n    const newValue = computer(key, currentValue);\n    if (newValue !== undefined) {\n      this.set(key, newValue);\n    }\n    else {\n      this.delete(key);\n    }\n    return newValue;\n  }\n\n  /**\n   * Computes a value for given key, the computer can return a value V (in which case the map\n   * will set the value for given key), if it returns undefined the mapping for key K will be\n   * removed.\n   * @param key Key to compute\n   * @param computer Computer which is called, note that the currentValue argument contains the existing\n   *                 value or is undefined when no mapping exists for the key.\n   * @return The newly computed value\n   */\n  public compute(key: K, computer: (currentKey: K, currentValue: V | undefined) => V | undefined) {\n    const currentValue = this.get(key);\n    const newValue = computer(key, currentValue);\n    if (newValue) {\n      this.set(key, newValue);\n    }\n    else {\n      this.delete(key);\n    }\n    return newValue;\n  }\n}\n","import {EnhancedMap} from \"../util/EnhancedMap\";\n\n/**\n * Internal loggers are used by the library itself. It allows us to log\n * on a few key points, which is useful when troubleshooting why\n * things don't work as one expects.\n *\n * By default the internal provider logs at Error (so nothing will\n * be shown unless there is an error in setup e.g.).\n */\nexport interface InternalLogger {\n  trace: (msg: () => string) => void;\n  debug: (msg: () => string) => void;\n  info: (msg: () => string) => void;\n  warn: (msg: () => string, error?: Error) => void;\n  error: (msg: () => string, error?: Error) => void;\n}\n\n/**\n * Internal log level (note: do NOT use LogLevel, or we get circular loading issues!)\n */\nexport enum InternalLogLevel {\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error\n}\n\n/**\n * Internal logger, this is NOT for end users. Instead this is used to enable logging for typescript-logging itself in case of problems.\n *\n * @param name Name of logger\n */\nexport function getInternalLogger(name: string): InternalLogger {\n  return provider.getLogger(name);\n}\n\n/**\n * Can be used to change the *internal* logging of the library.\n * Has no effect on end user logging.\n *\n * As such should normally not be used by end users.\n */\nexport const INTERNAL_LOGGING_SETTINGS = {\n  /**\n   * Changes the log level for the internal logging (for all new and existing loggers)\n   * @param level New log level\n   */\n  setInternalLogLevel: (level: InternalLogLevel) => provider.changeLogLevel(level),\n\n  /**\n   * Changes where messages are written to for all new and existing loggers),\n   * by default they are written to the console.\n   * @param fnOutput Function to write messages to\n   */\n  setOutput: (fnOutput: (msg: string) => void) => provider.changeOutput(fnOutput),\n\n  /**\n   * Resets the log level and output back to defaults (level to error and writing to console)\n   * for all new and existing loggers.\n   */\n  reset: () => provider.reset(),\n};\n\ninterface InternalProvider {\n  getLogger(name: string): InternalLogger;\n}\n\nclass InternalLoggerImpl implements InternalLogger {\n\n  private readonly _name: string;\n  private _level: InternalLogLevel;\n  private _fnOutput: (msg: string) => void;\n\n  public constructor(name: string, level: InternalLogLevel, fnOutput: (msg: string) => void) {\n    this._name = name;\n    this._level = level;\n    this._fnOutput = fnOutput;\n  }\n\n  public trace(msg: () => string): void {\n    this.log(InternalLogLevel.Trace, msg);\n  }\n\n  public debug(msg: () => string): void {\n    this.log(InternalLogLevel.Debug, msg);\n  }\n\n  public error(msg: () => string, error: Error | undefined): void {\n    this.log(InternalLogLevel.Error, msg, error);\n  }\n\n  public info(msg: () => string): void {\n    this.log(InternalLogLevel.Info, msg);\n  }\n\n  public warn(msg: () => string, error: Error | undefined): void {\n    this.log(InternalLogLevel.Warn, msg, error);\n  }\n\n  public setLevel(level: InternalLogLevel) {\n    this._level = level;\n  }\n\n  public setOutput(fnOutput: (msg: string) => void) {\n    this._fnOutput = fnOutput;\n  }\n\n  private log(level: InternalLogLevel, msg: () => string, error?: Error | undefined) {\n    if (this._level > level) {\n      return;\n    }\n\n    // tslint:disable-next-line:no-console\n    this._fnOutput(`${InternalLogLevel[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${msg()}${error ? \"\\n\" + error.stack : \"\"}`);\n  }\n}\n\nclass InternalProviderImpl implements InternalProvider {\n\n  private _logLevel: InternalLogLevel;\n  private _fnOutput: (msg: string) => void;\n\n  private readonly _loggers = new EnhancedMap<string, InternalLoggerImpl>();\n\n  constructor() {\n    this._logLevel = InternalLogLevel.Error;\n    this._fnOutput = InternalProviderImpl.logConsole;\n  }\n\n  public getLogger(name: string): InternalLogger {\n    return this._loggers.computeIfAbsent(name, key => new InternalLoggerImpl(key, this._logLevel, this._fnOutput));\n  }\n\n  public changeLogLevel(level: InternalLogLevel) {\n    this._logLevel = level;\n    this._loggers.forEach(logger => logger.setLevel(level));\n  }\n\n  public changeOutput(_fnOutput: (msg: string) => void) {\n    this._fnOutput = _fnOutput;\n    this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\n  }\n\n  public reset() {\n    this.changeLogLevel(InternalLogLevel.Error);\n    this._fnOutput = InternalProviderImpl.logConsole;\n    this._loggers.forEach(logger => logger.setOutput(this._fnOutput));\n  }\n\n  private static logConsole(msg: string) {\n    // tslint:disable-next-line:no-console\n    if (console && console.log) {\n      // tslint:disable-next-line:no-console\n      console.log(msg);\n    }\n  }\n}\n\nconst provider = new InternalProviderImpl();\n","/**\n * Log level for a logger.\n */\nexport enum LogLevel {\n  // Do not reverse/change order, a test relies on it.\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n}\n\n/* tslint:disable:no-namespace */\nexport namespace LogLevel {\n\n  /**\n   * Convert given value to LogLevel, if not matching returns undefined.\n   * @param val Value to convert\n   */\n  export function toLogLevel(val: string): LogLevel | undefined {\n    switch (val.toLowerCase()) {\n      case \"trace\":\n        return LogLevel.Trace;\n      case \"debug\":\n        return LogLevel.Debug;\n      case \"info\":\n        return LogLevel.Info;\n      case \"warn\":\n        return LogLevel.Warn;\n      case \"error\":\n        return LogLevel.Error;\n      case \"fatal\":\n        return LogLevel.Fatal;\n      default:\n        return undefined;\n    }\n  }\n}\n/* tslint:disable:enable-namespace */\n","import {CoreLogger} from \"../api/CoreLogger\";\nimport {ExceptionType} from \"../api/type/ExceptionType\";\nimport {LogLevel} from \"../api/LogLevel\";\nimport {LogMessageType} from \"../api/type/LogMessageType\";\nimport {LogRuntime} from \"../api/runtime/LogRuntime\";\nimport {LogMessage} from \"../api/LogMessage\";\n\n/**\n * Standard logger implementation that provides the basis for all loggers.\n */\nexport class CoreLoggerImpl implements CoreLogger {\n\n  private _runtime: LogRuntime;\n\n  public constructor(runtime: LogRuntime) {\n    this._runtime = runtime;\n  }\n\n  public get id() {\n    return this._runtime.id;\n  }\n\n  public get logLevel(): LogLevel {\n    return this._runtime.level;\n  }\n\n  public get runtimeSettings(): LogRuntime {\n    /* Return it as new literal, we don't want people to play with our internal state */\n    return {...this._runtime};\n  }\n\n  public set runtimeSettings(runtime: LogRuntime) {\n    this._runtime = runtime;\n  }\n\n  public trace(message: LogMessageType, ...args: unknown[]): void;\n  public trace(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public trace(message: LogMessageType, ...args: unknown[]): void {\n    this.logMessage(LogLevel.Trace, message, args);\n  }\n\n  public debug(message: LogMessageType, ...args: unknown[]): void;\n  public debug(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public debug(message: LogMessageType, ...args: unknown[]): void {\n    this.logMessage(LogLevel.Debug, message, args);\n  }\n\n  public info(message: LogMessageType, ...args: unknown[]): void;\n  public info(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public info(message: LogMessageType, ...args: unknown[]): void {\n    this.logMessage(LogLevel.Info, message, args);\n  }\n\n  public warn(message: LogMessageType, ...args: unknown[]): void;\n  public warn(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public warn(message: LogMessageType, ...args: unknown[]): void {\n    this.logMessage(LogLevel.Warn, message, args);\n  }\n\n  public error(message: LogMessageType, ...args: unknown[]): void;\n  public error(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public error(message: LogMessageType, ...args: unknown[]): void {\n    this.logMessage(LogLevel.Error, message, args);\n  }\n\n  public fatal(message: LogMessageType, ...args: unknown[]): void;\n  public fatal(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;\n  public fatal(message: LogMessageType, ...args: unknown[]): void {\n    this.logMessage(LogLevel.Fatal, message, args);\n  }\n\n  private logMessage(level: LogLevel, logMessageType: LogMessageType, args: unknown[]) {\n    if (this._runtime.level > level) {\n      return;\n    }\n\n    const nowMillis = Date.now();\n    const message = typeof logMessageType === \"string\" ? logMessageType : logMessageType();\n    const errorAndArgs = CoreLoggerImpl.getErrorAndArgs(args);\n\n    /*\n     * Deal with raw message here.\n     */\n    switch (this._runtime.channel.type) {\n      case \"RawLogChannel\":\n        this._runtime.channel.write({\n          message,\n          exception: errorAndArgs.error,\n          args: errorAndArgs.args,\n          timeInMillis: nowMillis,\n          level,\n          logNames: this._runtime.name,\n        }, this._runtime.argumentFormatter);\n        return;\n      case \"LogChannel\":\n        this._runtime.channel.write(this.createLogMessage(message, level, errorAndArgs, nowMillis));\n        break;\n    }\n  }\n\n  private formatArgValue(value: any): string {\n    try {\n      return this._runtime.argumentFormatter(value);\n    }\n    catch (e: unknown) {\n      // We don't really care what failed, except that the convert function failed.\n      return `>>ARG CONVERT FAILED: '${value !== undefined ? value.toString() : \"undefined\"}'<<`;\n    }\n  }\n\n  private createLogMessage(message: string, level: LogLevel, errorAndArgs: ErrorAndArgs, nowMillis: number): LogMessage {\n    let errorResult: string | undefined;\n    const error = errorAndArgs.error;\n    const args = errorAndArgs.args;\n    if (error) {\n      errorResult = `${error.name}: ${error.message}`;\n      if (error.stack) {\n        errorResult += `@\\n${error.stack}`;\n      }\n    }\n\n    /*\n     * We need to add the date, and log names (in front of the now formatted message).\n     * Finally we also need to format any additional arguments and append after the message.\n     */\n    const dateFormatted = this._runtime.dateFormatter(nowMillis);\n    let levelAsStr = LogLevel[level].toUpperCase();\n    if (levelAsStr.length < 5) {\n      levelAsStr += \" \";\n    }\n    const names = typeof this._runtime.name === \"string\" ? this._runtime.name : this._runtime.name.join(\", \");\n    const argsFormatted = typeof args !== \"undefined\" && args.length > 0 ? (\" [\" + (args.map(arg => this.formatArgValue(arg))).join(\", \") + \"]\") : \"\";\n    const completedMessage = dateFormatted + \" \" + levelAsStr + \" [\" + names + \"] \" + message + argsFormatted;\n\n    return {\n      message: completedMessage,\n      error: errorResult,\n    };\n  }\n\n  private static getErrorAndArgs(args: unknown[]): ErrorAndArgs {\n\n    /*\n      The args are optional, but the first entry may be an Error or a function to an Error, or finally be a function to extra arguments.\n      The last is only true, if the length of args === 1, otherwise we expect args starting at pos 1 and further to be just that - args.\n     */\n    if (args.length === 0) {\n      return {};\n    }\n\n    let error: Error | undefined;\n    let actualArgs: unknown[] | undefined;\n    const value0 = args[0];\n\n    /* If the first argument is an Error, we can stop straight away, the rest are additional arguments then if any */\n    if (value0 instanceof Error) {\n      error = value0;\n      actualArgs = args.length > 1 ? args.slice(1) : undefined;\n\n      return {error, args: actualArgs};\n    }\n\n    /* If the first argument is a function, it means either it will return the Error, or if the array length === 1 a function, returning the arguments */\n    if (typeof value0 === \"function\") {\n      const errorOrArgs = value0();\n\n      if (errorOrArgs instanceof Error) {\n        error = errorOrArgs;\n        actualArgs = args.length > 1 ? args.slice(1) : undefined;\n        return {error, args: actualArgs};\n      }\n\n      if (args.length === 1) {\n        /* The first argument was a function, we assume it returned the extra argument(s) */\n        if (Array.isArray(errorOrArgs)) {\n          return {args: errorOrArgs.length > 0 ? errorOrArgs : undefined};\n        }\n        else {\n          /* No idea what was returned we just assume a single value */\n          return {args: errorOrArgs};\n        }\n      }\n      else {\n        /*\n          This is a weird situation but there's no way to avoid it, the first argument was a function but did not return an Error and the args are > 1,\n          so just add the args returned, as well as any remaining.\n        */\n        if (Array.isArray(errorOrArgs)) {\n          return {args: [...errorOrArgs, ...args.slice(1)]};\n        }\n        return {args: [errorOrArgs, ...args.slice(1)]};\n      }\n    }\n\n    /* All args are ordinary arguments, or at least the first arg was not an Error or a Function, so we add all as args */\n    return {args};\n  }\n}\n\ninterface ErrorAndArgs {\n  error?: Error;\n  args?: unknown[];\n}\n","/**\n * Pad given value with given fillChar from the beginning (default is an empty space)\n * @param value Value to pad\n * @param length The length the string must be\n * @param fillChar The padding char (1 char length allowed only)\n * @return Padded string or the same string if it is already of given length (or larger).\n */\nexport function padStart(value: string, length: number, fillChar: string = \" \") {\n  return padInternal(value, length, \"start\", fillChar);\n}\n\n/**\n * Pad given value with given fillChar from the end (default is an empty space)\n * @param value Value to pad\n * @param length The length the string must be\n * @param fillChar The padding char (1 char length allowed only)\n * @return Padded string or the same string if it is already of given length (or larger).\n */\nexport function padEnd(value: string, length: number, fillChar: string = \" \") {\n  return padInternal(value, length, \"end\", fillChar);\n}\n\n/**\n * Returns the max length of a string value in given array\n * @param arr Array to check\n * @return Max length, 0 if array is empty\n */\nexport function maxLengthStringValueInArray(arr: string[]): number {\n  return arr\n    .map(v => v.length)\n    .reduce((previous, current) => {\n      if (current > previous) {\n        return current;\n      }\n      return previous;\n    }, 0);\n}\n\nfunction padInternal(value: string, length: number, padType: \"start\" | \"end\", fillChar: string = \" \") {\n  if (length <= value.length) {\n    return value;\n  }\n  if (fillChar.length > 1) {\n    throw new Error(`Fill char must be one char exactly, it is: ${fillChar.length}`);\n  }\n\n  const charsNeeded = length - value.length;\n  let padding = \"\";\n\n  for (let i = 0; i < charsNeeded; i++) {\n    padding += fillChar;\n  }\n\n  if (padType === \"start\") {\n    return padding + value;\n  }\n  return value + padding;\n}\n","import {ArgumentFormatterType} from \"../api/type/ArgumentFormatterType\";\nimport {DateFormatterType} from \"../api/type/DateFormatterType\";\nimport {padStart} from \"../../util/StringUtil\";\n\n/**\n * Default argument formatter function, used by the library, see {@link ArgumentFormatterType}.\n * Can be used by an end user as well if needed.\n * @param arg The argument to format\n * @returns argument stringified to string (JSON.stringify), if arg is undefined returns \"undefined\" (without quotes).\n */\nexport function formatArgument(arg: unknown): string {\n  if (arg === undefined) {\n    return \"undefined\";\n  }\n  return JSON.stringify(arg);\n}\n\n/**\n * Default date formatter function, used by the library, see {@link DateFormatterType}.\n * Can be used by an end user as well if needed.\n * @param millisSinceEpoch Milliseconds since epoch\n * @returns The date in format: yyyy-MM-dd HH:mm:ss,SSS (example: 2021-02-26 09:06:28,123)\n */\nexport function formatDate(millisSinceEpoch: number): string {\n  const date = new Date(millisSinceEpoch);\n  const year = date.getFullYear();\n  const month = padStart((date.getMonth() + 1).toString(), 2, \"0\");\n  const day = padStart(date.getDate().toString(), 2, \"0\");\n  const hours = padStart(date.getHours().toString(), 2, \"0\");\n  const minutes = padStart(date.getMinutes().toString(), 2, \"0\");\n  const seconds = padStart(date.getSeconds().toString(), 2, \"0\");\n  const millis = padStart(date.getMilliseconds().toString(), 2, \"0\");\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds},${millis}`;\n}\n","import {LogChannel} from \"../../api/LogChannel\";\nimport {LogMessage} from \"../../api/LogMessage\";\n\n/* tslint:disable:no-console */\n\n/**\n * Default standard LogChannel which logs to console.\n */\nexport class ConsoleLogChannel implements LogChannel {\n\n  public readonly type: \"LogChannel\" = \"LogChannel\";\n\n  public write(msg: LogMessage): void {\n    if (console && console.log) {\n      console.log(msg.message + (msg.error ? `\\n${msg.error}` : \"\"));\n    }\n  }\n}\n","import {LogChannel} from \"../../api/LogChannel\";\nimport {ConsoleLogChannel} from \"./ConsoleLogChannel\";\n\n/* tslint:disable:no-namespace */\n\n/**\n * Provides access to various default channels provided by typescript logging.\n */\nexport namespace DefaultChannels {\n  /**\n   * Create a new standard LogChannel that logs to the console.\n   */\n  export function createConsoleChannel(): LogChannel {\n    return new ConsoleLogChannel();\n  }\n}\n","import {LogProvider} from \"../api/LogProvider\";\nimport {LoggerNameType} from \"../api/type/LoggerNameType\";\nimport {CoreLogger} from \"../api/CoreLogger\";\nimport {LogConfig} from \"../api/config/LogConfig\";\nimport {EnhancedMap} from \"../../util/EnhancedMap\";\nimport {CoreLoggerImpl} from \"./CoreLoggerImpl\";\nimport {RuntimeSettings, RuntimeSettingsRequired} from \"../api/runtime/RuntimeSettings\";\nimport {getInternalLogger} from \"../../internal/InternalLogger\";\nimport {formatArgument, formatDate} from \"./DefaultFormatters\";\nimport {DefaultChannels} from \"./channel/DefaultChannels\";\nimport {LogLevel} from \"../api/LogLevel\";\nimport {LogId} from \"../api/LogId\";\nimport {LogRuntime} from \"../api/runtime/LogRuntime\";\n\n/**\n * Implementation for {@link LogProvider}\n */\nexport class LogProviderImpl implements LogProvider {\n\n  private readonly _log = getInternalLogger(\"core.impl.LogProviderImpl\");\n\n  private readonly _name: string;\n  /**\n   * Default settings that were taken on creation.\n   * @private\n   */\n  private readonly _settings: LogConfig;\n  private readonly _loggers: EnhancedMap<string, CoreLoggerImpl>;\n  private readonly _idToKeyMap: EnhancedMap<LogId, string>;\n\n  /**\n   * Current runtime settings (same as _settings on creation), but may be different if runtime settings are changed.\n   * Creation of loggers always use this.\n   * @private\n   */\n  private _globalRuntimeSettings: RuntimeSettingsRequired;\n  private _nextLoggerId: number;\n\n  public constructor(name: string, settings: LogConfig) {\n    this._name = name;\n    this._settings = settings;\n    this._loggers = new EnhancedMap();\n    this._idToKeyMap = new EnhancedMap();\n    this._globalRuntimeSettings = {level: settings.level, channel: settings.channel};\n    this._nextLoggerId = 1;\n\n    this._log.trace(() => `Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`);\n  }\n\n  public get runtimeSettings(): LogConfig {\n    return {\n      ...this._settings,\n      level: this._globalRuntimeSettings.level,\n      channel: this._globalRuntimeSettings.channel,\n    };\n  }\n\n  public getLogger(name: LoggerNameType): CoreLogger {\n    return this.getOrCreateLogger(name);\n  }\n\n  public updateLoggerRuntime(log: CoreLogger, settings: RuntimeSettings): boolean {\n    this._log.debug(() => `Updating logger ${log.id} runtime settings using: '${JSON.stringify(settings)}'`);\n\n    const key = this._idToKeyMap.get(log.id);\n    if (key === undefined) {\n      this._log.warn(() => `Cannot update logger with id: ${log.id}, it was not found.`);\n      return false;\n    }\n\n    this._loggers.computeIfPresent(key, (currentKey, currentValue) => {\n      currentValue.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(currentValue.runtimeSettings, settings);\n      return currentValue;\n    });\n\n    return true;\n  }\n\n  public updateRuntimeSettings(settings: RuntimeSettings): void {\n    this._log.debug(() => `Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(settings)}'`);\n\n    this._globalRuntimeSettings = {\n      /*\n       * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\n       * behavior of javascript where 0 is seen as false.\n       */\n      level: settings.level !== undefined ? settings.level : this._globalRuntimeSettings.level,\n      channel: settings.channel !== undefined ? settings.channel : this._globalRuntimeSettings.channel,\n    };\n\n    this._loggers.forEach(logger => logger.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(logger.runtimeSettings, settings));\n  }\n\n  /**\n   * Removes all state and loggers, it reverts back to as it was after initial construction.\n   */\n  public clear() {\n    this._loggers.clear();\n    this._idToKeyMap.clear();\n    this._globalRuntimeSettings = {...this._settings};\n    this._nextLoggerId = 1;\n  }\n\n  private getOrCreateLogger(name: LoggerNameType): CoreLoggerImpl {\n    const key = LogProviderImpl.createKey(name);\n\n    const logger = this._loggers.computeIfAbsent(key, () => {\n      const runtime: LogRuntime = {\n        level: this._globalRuntimeSettings.level,\n        channel: this._globalRuntimeSettings.channel,\n        id: this.nextLoggerId(),\n        name,\n        argumentFormatter: this._settings.argumentFormatter,\n        dateFormatter: this._settings.dateFormatter,\n      };\n      return new CoreLoggerImpl(runtime);\n    });\n    this._idToKeyMap.computeIfAbsent(logger.id, () => key);\n    return logger;\n  }\n\n  private nextLoggerId(): LogId {\n    const result = this._name + \"_\" + this._nextLoggerId;\n    this._nextLoggerId++;\n    return result;\n  }\n\n  private static mergeRuntimeSettingsIntoLogRuntime(currentSettings: LogRuntime, settings: RuntimeSettings): LogRuntime {\n    return {\n      ...currentSettings,\n      /*\n       * Undefined check is necessary, as level is a number (and LogLevel.Trace = 0), a ternary check otherwise results in the annoying \"truthy/falsy\"\n       * behavior of javascript where 0 is seen as false.\n       */\n      level: settings.level !== undefined ? settings.level : currentSettings.level,\n      channel: settings.channel !== undefined ? settings.channel : currentSettings.channel,\n    };\n  }\n\n  private static createKey(name: LoggerNameType) {\n    if (typeof name === \"string\") {\n      return name;\n    }\n    return name.join(\",\");\n  }\n}\n\n/**\n * Creates a default LogConfig (should not be exported).\n */\nexport function createDefaultLogConfig(): LogConfig {\n  return {\n    argumentFormatter: formatArgument,\n    channel: DefaultChannels.createConsoleChannel(),\n    dateFormatter: formatDate,\n    level: LogLevel.Error,\n  };\n}\n","import {LogConfig} from \"./api/config/LogConfig\";\nimport {LogProvider} from \"./api/LogProvider\";\nimport {LogProviderImpl} from \"./impl/LogProviderImpl\";\nimport {LogChannel} from \"./api/LogChannel\";\n\n/* Export the API */\nexport {CoreLogger} from \"./api/CoreLogger\";\nexport {LogChannel} from \"./api/LogChannel\";\nexport {LogId} from \"./api/LogId\";\nexport {LogLevel} from \"./api/LogLevel\";\nexport {LogMessage} from \"./api/LogMessage\";\nexport {LogProvider} from \"./api/LogProvider\";\nexport {LogRuntime} from \"./api/runtime/LogRuntime\";\nexport {RawLogChannel} from \"./api/RawLogChannel\";\nexport {RawLogMessage} from \"./api/RawLogMessage\";\n\nexport {LogConfig} from \"./api/config/LogConfig\";\n\nexport {RuntimeSettings} from \"./api/runtime/RuntimeSettings\";\n\nexport {ArgumentFormatterType} from \"./api/type/ArgumentFormatterType\";\nexport {DateFormatterType} from \"./api/type/DateFormatterType\";\nexport {ExceptionType} from \"./api/type/ExceptionType\";\nexport {LogChannelType} from \"./api/type/LogChannelType\";\nexport {LoggerNameType} from \"./api/type/LoggerNameType\";\nexport {LogMessageType} from \"./api/type/LogMessageType\";\nexport * from \"./api/type/TypeUtils\";\n\n/* Export default channels and a few utilities from impl, only what we deem convenient for end users */\nexport * from \"./impl/channel/DefaultChannels\";\nexport * from \"./impl/DefaultFormatters\";\n\n/**\n * Create a new LogProvider, this is for flavor usage only. End users should not\n * use this and instead use whatever the flavor offers to build some config and\n * get loggers from there.\n */\nexport function createLogProvider(name: string, settings: LogConfig): LogProvider {\n  return new LogProviderImpl(name, settings);\n}\n","import {LogChannel, LogMessage, RawLogChannel, RawLogMessage} from \"../main/core\";\n\n/**\n * LogChannel that pushes log messages to a buffer.\n */\nexport class ArrayLogChannel implements LogChannel {\n  private readonly _buffer: LogMessage[] = [];\n  public readonly type = \"LogChannel\";\n\n  public write(msg: LogMessage): void {\n    this._buffer.push(msg);\n  }\n\n  public get logMessages() {\n    return this._buffer;\n  }\n\n  public get messages() {\n    return this._buffer.map(msg => msg.message);\n  }\n}\n\n/**\n * RawLogChannel that pushes raw log messages to a buffer.\n */\nexport class ArrayRawLogChannel implements RawLogChannel {\n\n  private _buffer: RawLogMessage[] = [];\n  public readonly type = \"RawLogChannel\";\n\n  public write(msg: RawLogMessage, _: (arg: unknown) => string): void {\n    this._buffer.push(msg);\n  }\n\n  public get messages(): ReadonlyArray<string> {\n    return this._buffer.map(m => m.message);\n  }\n\n  public get errors(): ReadonlyArray<Error | undefined> {\n    return this._buffer.map(m => m.exception);\n  }\n\n  public get size() {\n    return this._buffer.length;\n  }\n\n  public get rawMessages(): ReadonlyArray<RawLogMessage> {\n    return this._buffer;\n  }\n\n  public clear() {\n    this._buffer = [];\n  }\n}\n\n/**\n * Test class to help test the log control.\n */\nexport class TestControlMessage {\n  private _messages: string[] = [];\n\n  public constructor() {\n    this.write = this.write.bind(this);\n  }\n\n  public get messages(): string[] {\n    return this._messages;\n  }\n\n  public write(msg: string) {\n    this._messages.push(msg);\n  }\n\n  public clear(): void {\n    this._messages = [];\n  }\n}\n"],"names":[],"mappings":"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"}