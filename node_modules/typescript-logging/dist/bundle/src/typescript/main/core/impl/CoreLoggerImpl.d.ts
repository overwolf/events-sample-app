import { CoreLogger } from "../api/CoreLogger";
import { ExceptionType } from "../api/type/ExceptionType";
import { LogLevel } from "../api/LogLevel";
import { LogMessageType } from "../api/type/LogMessageType";
import { LogRuntime } from "../api/runtime/LogRuntime";
/**
 * Standard logger implementation that provides the basis for all loggers.
 */
export declare class CoreLoggerImpl implements CoreLogger {
    private _runtime;
    constructor(runtime: LogRuntime);
    get id(): string;
    get logLevel(): LogLevel;
    get runtimeSettings(): LogRuntime;
    set runtimeSettings(runtime: LogRuntime);
    trace(message: LogMessageType, ...args: unknown[]): void;
    trace(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    debug(message: LogMessageType, ...args: unknown[]): void;
    debug(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    info(message: LogMessageType, ...args: unknown[]): void;
    info(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    warn(message: LogMessageType, ...args: unknown[]): void;
    warn(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    error(message: LogMessageType, ...args: unknown[]): void;
    error(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    fatal(message: LogMessageType, ...args: unknown[]): void;
    fatal(message: LogMessageType, error: ExceptionType, ...args: unknown[]): void;
    private logMessage;
    private formatArgValue;
    private createLogMessage;
    private static getErrorAndArgs;
}
//# sourceMappingURL=CoreLoggerImpl.d.ts.map